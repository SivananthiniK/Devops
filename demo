from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from .models import Room

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def toggle_bookable_status(request, room_id):
    try:
        room = Room.objects.get(id=room_id)
    except Room.DoesNotExist:
        return Response({'error': 'Room not found'}, status=status.HTTP_404_NOT_FOUND)

    # Optional: Check if user is admin (customize as needed)
    if not request.user.is_staff:
        return Response({'error': 'Permission denied'}, status=status.HTTP_403_FORBIDDEN)

    is_bookable = request.data.get('is_bookable')
    if is_bookable is None:
        return Response({'error': 'Missing "is_bookable" in request body'}, status=status.HTTP_400_BAD_REQUEST)

    room.is_bookable = is_bookable
    room.save()

    return Response({
        'message': f'Room is_bookable status updated to {room.is_bookable}',
        'room_id': room.id,
        'is_bookable': room.is_bookable
    }, status=status.HTTP_200_OK)





from django.urls import path
from .views import toggle_bookable_status

urlpatterns = [
    # other routes...
    path('rooms/<int:room_id>/toggle_bookable/', toggle_bookable_status, name='toggle_bookable'),
]




const toggleRoomBooking = async (room, newStatus) => {
  try {
    const response = await axios.post(
      `${process.env.REACT_APP_BACKEND_URL}/rooms/${room.id}/toggle_bookable/`,
      { is_bookable: newStatus },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: 'Bearer ' + idToken,
          token: 'Bearer ' + localStorage.getItem('jwtToken')
        }
      }
    );
    setSelectedRoom({ ...room, is_bookable: newStatus }); // update UI
  } catch (error) {
    console.error('Failed to toggle bookable status:', error);
  }
};







