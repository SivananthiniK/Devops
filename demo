updater.yml


- name: deploy status app service
  hosts: all
  become: true
  become_user: root
  become_method: sudo
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Updating docker-compose.yml
      copy:
        src: ../docker-compose.yml  
        dest: "{{ appdir | default('/opt/app') }}"
    
    - name: Create credentials directory if it doesn't exist
      ansible.builtin.file:
        path: "{{ CREDENTIAL_DIR }}"
        state: directory
    
    - name: Copy Token content to file
      ansible.builtin.copy:
        src: "{{ TOKENS }}"
        dest: "{{ CREDENTIAL_DIR }}/envfile.env"
    
    -name: Copy variables to env file
      ansible.builtin.template:
        src: "templates/envfile.env.j2"
        dest: "{{ CREDENTIAL_DIR }}/envfile.env"
 
    - name: Updating container
      no_log: true
      ignore_errors: true
      shell:
        cmd: |
          message() {
            echo -e "$(date +'%Y-%m-%d %H:%M:%S') $HOSTNAME:$1"
          }

          message "\e[1;34m info: Logging into container registry"
          docker login --username $REGISTRY_USER -p $REGISTRY_TOKEN gitlab.mitsogo.com:4567

          if [ $? -ne 0 ]; then
            message "\e[1;31m critical: Error while logging into container registry"
            exit 1
          else
            message "\e[1;34m info: Successfully logged into container registry"
          fi

          message "\e[1;34m info: Pulling docker images"
          FRONTEND_VERSION=$FRONTEND_VERSION BACKEND_VERSION=$BACKEND_VERSION docker compose pull

          if [ $? -ne 0 ]; then
            message "\e[1;31m critical: Error while pulling images from container registry"
            exit 2
          else
            message "\e[1;34m info: Successfully pulled docker images from container registry"
          fi

          message "\e[1;34m info: Updating containers with latest image"
          FRONTEND_VERSION=$FRONTEND_VERSION BACKEND_VERSION=$BACKEND_VERSION docker compose up -d

          if [ $? -ne 0 ]; then
            message "\e[1;31m critical: Failed to update containers"
            exit 3
          else
            message "\e[1;34m info: Successfully updated containers with latest image"
          fi

          message "\e[1;34m info: Logging out from container registry"
          docker logout gitlab.com
        chdir: "{{ appdir | default('/opt/app') }}"
      environment:
        REGISTRY_TOKEN: "{{ lookup('env', 'REGISTRY_TOKEN') }}"
        REGISTRY_USER: "{{ lookup('env', 'REGISTRY_USER') }}"
        FRONTEND_VERSION: "{{ FRONTEND_VERSION | default('latest') }}"
        BACKEND_VERSION: "{{ BACKEND_VERSION | default('latest') }}"
        CREDENTIAL_DIR: "{{ CREDENTIAL_DIR }}"
        TOKEN_FILE: "{{ CREDENTIAL_DIR }}/envfile.env"
      register: output

    - debug:
        msg: "{{ output.stdout_lines }}"
    - debug:
        msg: "{{ output.stderr.split('\n') }}"

    - name: Failing on errors
      fail:
        msg: "\033[31mStatus app update failed\033[0m"
      when: output.rc != 0







envfile.env.j2


[zabbix]
ZABBIX_URL = {{ ZABBIX_URL }}
ZABBIX_USER = {{ ZABBIX_USER }}
ZABBIX_PASSWORD = {{ ZABBIX_PASSWORD }}

[azure]
AZURE_CLIENT_ID = {{ AZURE_CLIENT_ID }}
AZURE_TENANT_ID = {{ AZURE_TENANT_ID }}
AZURE_REDIRECT_URL = {{ AZURE_REDIRECT_URL }}
AZURE_SECRET = {{ AZURE_SECRET }}

[middleware]
OPEN_PATHS={{ OPEN_PATHS }}
HYBRID_PATHS={{ HYBRID_PATHS }}

[sentry]
dsn={{ SENTRY_DSN }}
release={{ SENTRY_RELEASE }}




deployment.yml


.build-web:
  stage: build
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  image: docker:24.0.9
  services:
  - name: docker:24.0.9-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - mv "$REACT_CREDENTIALS" web/.env
    - docker build --no-cache -f ".gitlab/dockerfiles/web/dockerfile" -t "gitlab.mitsogo.com:4567/devops/statusapp/web:$TAG" --progress plain .
      --label "org.label-schema.schema-version=1.0"
      --label "org.label-schema.vcs-ref=${CI_COMMIT_REF_NAME}"
      --label "org.label-schema.build-date=$(date +%Y-%m-%dT%T%z)"
      --label "org.label-schema.vendor=Mitsogo Inc"
      --label "org.label-schema.verion=${TAG}"
      --label "org.label-schema.name=status-app-web"
    - docker push gitlab.mitsogo.com:4567/devops/statusapp/web:$TAG
  tags:
    - imagebuilder_docker


build-beta-web:
  extends: .build-web
  environment:
    name: beta
    action: prepare
  variables:
    TAG: "staging"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^staging_[0-9].*/
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^staging_[0-9].*/

build-prod-web:
  extends: .build-web
  environment:
    name: prod
    action: prepare
  variables:
    TAG: "latest"
  rules:
    - if: $CI_COMMIT_TAG =~ /^STATUSAPP_[0-9].*/
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

.build-server:
  stage: build
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  image: docker:24.0.9
  services:
  - name: docker:24.0.9-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build -f ".gitlab/dockerfiles/server/dockerfile" -t "gitlab.mitsogo.com:4567/devops/statusapp/server:$TAG" .
      --label "org.label-schema.schema-version=1.0"
      --label "org.label-schema.vcs-ref=${CI_COMMIT_REF_NAME}"
      --label "org.label-schema.build-date=$(date +%Y-%m-%dT%T%z)"
      --label "org.label-schema.vendor=Mitsogo Inc"
      --label "org.label-schema.verion=${TAG}"
      --label "org.label-schema.name=status-app-server"
    - docker push gitlab.mitsogo.com:4567/devops/statusapp/server:$TAG
  tags:
    - imagebuilder_docker   

build-beta-server:
  extends: .build-server
  environment:
    name: beta
    action: prepare
  variables:
    TAG: "staging"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^staging_[0-9].*/
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^staging_[0-9].*/

build-prod-server:
  extends: .build-server
  environment:
    name: prod
    action: prepare
  variables:
    TAG: "latest"
  rules:
    - if: $CI_COMMIT_TAG =~ /^STATUSAPP_[0-9].*/
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

beta:
  stage: deployment
  extends: .ansible-deployment
  environment:
    name: beta
    action: start
  variables:
    PLAYBOOK_PATH: ".gitlab/deployment/playbooks/updater.yml"
    INVENTORY: ".gitlab/deployment/playbooks/inventory.txt"
    ANSIBLE_EXTRA_VARS: >
      ansible_sudo_pass=$SUDOPASS
      BACKEND_VERSION='staging'
      FRONTEND_VERSION='staging'
      CREDENTIAL_DIR=$CREDENTIAL_DIR
      TOKENS=$TOKENS
      ZABBIX_URL=$ZABBIX_URL
      ZABBIX_USER=$ZABBIX_USER
      ZABBIX_PASSWORD=$ZABBIX_PASSWORD
      AZURE_CLIENT_ID=$AZURE_CLIENT_ID
      AZURE_TENANT_ID=$AZURE_TENANT_ID
      AZURE_REDIRECT_URL=$AZURE_REDIRECT_URL
      AZURE_SECRET=$AZURE_SECRET
      OPEN_PATHS=$OPEN_PATHS
      HYBRID_PATHS=$HYBRID_PATHS
      SENTRY_DSN=$SENTRY_DSN
      SENTRY_RELEASE=$SENTRY_RELEASE
      
    LIMIT: "beta"
    SUBSCRIBE_EMAIL: "False"
    APPROVER_EMAILS: "$GITLAB_USER_EMAIL"
  script:
      - ansible-playbook "$PLAYBOOK_PATH" -i "$INVENTORY" -e "$ANSIBLE_EXTRA_VARS"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^staging_[0-9].*/

production:
  stage: deployment
  extends: .ansible-deployment
  environment:
    name: prod
    action: start
  variables:
    PLAYBOOK_PATH: ".gitlab/deployment/playbooks/updater.yml"
    INVENTORY: ".gitlab/deployment/playbooks/inventory.txt"
    ANSIBLE_EXTRA_VARS: "ansible_sudo_pass=$SUDOPASS appdir=/opt/apps/statusapp CREDENTIAL_DIR=$CREDENTIAL_DIR TOKENS=$TOKENS"
    LIMIT: "production"
    SUBSCRIBE_EMAIL: "False"
    APPROVER_EMAILS: "$DEPLOYMENT_APPROVERS"
  rules:
    - if: $CI_COMMIT_TAG =~ /^STATUSAPP_[0-9].*/
