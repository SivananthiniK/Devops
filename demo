
def login_auth(request):
    if request.method == 'POST':
        access_token = json.loads(request.body).get('token')
        config_url = f'https://login.microsoftonline.com/{settings.MSAL_TENANT_ID}/discovery/v2.0/keys'
        response = requests.get(config_url)
        jwks=response.json()
        try:
            decoded_token = jwt.decode(
            access_token, 
            key=jwks,
            algorithms=['RS256'],
            audience=settings.MSAL_CLIENT_ID,
            )
            logger.info('Token decoded. Fetching user information from the database')
            logger.info("decoded_token {}".format(decoded_token))
            user_email = decoded_token.get('preferred_username')
            try:
                user = AppUser.objects.filter(email=user_email)
                if user.exists():
                    user = user.first()
                    data = {'email': user_email.lower(), 'role': user.role}
                    data = encrypt_data(json.dumps(data))
                    jwt_token = jwt.encode({'data': data}, settings.MSAL_CLIENT_SECRET, algorithm='HS256')
                    if user.role == 'admin':
                        logger.info('User is admin')
                        return JsonResponse({'message':'User is admin','jwt_token': jwt_token})
                    else:
                        logger.info('User is not admin')
                        return JsonResponse({'message':'User is not admin','jwt_token': jwt_token})
            except AppUser.DoesNotExist:
                logger.warning(f"User not found in the database, Email: {user_email}")
                return JsonResponse({"error": "User not found in custom users table"}, status=404)

        except Exception as e:
            logger.error(f"Authorisation error: {str(e)}")
            raise ValueError(f"Authorisation error: {str(e)}")


