import React, { useEffect, useState } from 'react';
import Typography from '@mui/material/Typography';
import { Container, Grid, TextField, Checkbox, FormGroup, Link, FormControlLabel, Button, IconButton, Tooltip} from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import Box from '@mui/material/Box';
import axios from 'axios';
import {jwtDecode} from "jwt-decode";
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import { useNavigate } from 'react-router-dom';
import { MuiTelInput } from 'mui-tel-input';
import { validatePhoneNumber } from '../components/form/PhoneNumberValidation.js';
import RestartAltIcon from '@mui/icons-material/RestartAlt'
import TextareaField from '../components/form/TextareaField';
import SelectDropdown from '../components/form/SelectDropdown';
import ConfirmationDialog from '../components/dialogs/ConfirmationDialog';
import SnackbarDialog from '../components/dialogs/SnackbarDialog';


function App({accessToken,userPermissions,user}) {

  const navigate = useNavigate();
  const formatting = dayjs.extend(utc);

  useEffect(() => { 
    var access = false;

  if(userPermissions.is_admin !== true){
    var permissions = userPermissions.details[0].permissions

    access = permissions.reduce((accumulator, permission) => {
      if (permission.code === "can_access_hubspot_and_zendesk_operations") {
        return true;
      } else {
        return accumulator;
      }
    }, false);

    if(access === false){
      console.log('navigating to error page')
      navigate(`/error`);
    }
  }
}, [userPermissions]);

  const [countryData, setCountryData] = React.useState([]);
  const [timezoneList, setTimezoneList] = useState([]);

  const [message, setMessage] = useState('');
  const [confirmationOpen, setConfirmationOpen] = useState(false);
  const [emailError, setEmailError] = useState('');
  const [disableBtn, setDisableBtn] = useState(true);
  

  useEffect(() => {
    fetchTimezoneList();
    fetchCountryList();
  },[]);

  const nodevicesoptions = [ '15-25', '26-50', '51-100', '101-250', '251-500', '501-1000', '1001-2500', '2500+'];


  const typeOfRequestOptions = [ 'Demo Request' ]//,'Callback Request','Partnership Lead','Pricing Enquiry/Get Quote'];


  const leadSourceOptions = [ 'Call', 'Email', 'Social','Other'];

  const [formData, setFormData] = useState({
    typeOfRequest: 'Demo Request',
    leadSource: '',
    timezone: '',
    country: '',
    date: null,
    name: '',
    email:'',
    number:'',
    company:'',
    devicecount:'',
    ip:'',
    hubspot: false,
    meeting: false,
  });

  const [callbackData, setCallbackData] = useState({
    name: '',
    email: '',
    number: '',
    message: '',
    typeOfRequest: 'call_back',
    timezone: '',
    country:'',
    start_time: '',
    agree: false
  })

  const [partnershipData,setPartnershipData] = useState({
    name: '',
    email: '',
    number: '',
    description: '',
    website: '',
    address: '',
    hexnode_products: '',
    type_of_request: 'partner_signup',
    agree: false
  })

  const [pricingQuoteData, setPricingQuoteData] = useState({
    name: '',
    email: '',
    number: '',
    devices: '',
    pricing_plan: '',
    subscription: '',
    get_quote: false,
    agree: false
  })

  const pricingPlanOptions = [ 'Express', 'Pro', 'Enterprise', 'Ultimate', 'Ultra' ]
  const billingOptions = ['Annual', 'Monthly']

  const [actionStatus, setActionStatus] = useState({
    severity: '',
    message: ''
  })
  const [showSnackbar, setShowSnackbar] = useState(false);


  useEffect(() => {
    var value = true;
    var temp = []; 
    if(formData.typeOfRequest === 'Demo Request') { temp=formData }
    else if(formData.typeOfRequest === 'Callback Request') { temp=callbackData }
    else if(formData.typeOfRequest === 'Partnership Lead') { temp=partnershipData }
    else if(formData.typeOfRequest === 'Pricing Enquiry/Get Quote') { temp=pricingQuoteData }

      for (const key in temp) {
        if(key === 'ip'){
          value = false;
          continue
        }
        if (temp.hasOwnProperty(key) && temp[key] !== '' ) {
          value=false;
          if (temp.hasOwnProperty('agree') && temp[key] !== true ) {
            value=true;
          }
        }
        else{
          value=true;
          break;
        }
      }
      console.log('button disabled ',value)
      
      if(value === false){
        setDisableBtn(!formValidation(temp));
      }
      else{
        setDisableBtn(true)
      }
      

  },[formData, callbackData, partnershipData, pricingQuoteData]);

  useEffect(() => {
    if (actionStatus.severity !== '' && actionStatus.message !== '') {
      setShowSnackbar(true);
    }
  }, [actionStatus]);

  const fetchTimezoneList = async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/zoom_timezonelist/`, {
         headers: {
         Authorization: 'Bearer '+accessToken
        },
      });

      setTimezoneList(response.data);

    } catch (error) {
      console.error('Error:', error);
    }
  }

  const fetchCountryList = async () => {
    try{
      const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/country/`, {
        headers: {
        Authorization: 'Bearer '+accessToken
       },
     });

     setCountryData(response.data);

    } catch (error) {
      console.error('Error:', error);
    }
  }

  const validateEmail = (email) => {
    // Email regex pattern for basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleFormChange = (event,request_type) => {
    const { name, value, type, checked } = event.target;
  
    if(request_type === 'demo'){
      if(name === 'typeOfRequest'){
        setEmailError(' ')
      }
      if (type === 'checkbox') {
        setFormData({
          ...formData,
          [name]: checked,
        });
      } else {
        setFormData({
          ...formData,
          [name]: value,
        });
      };
    }
    if(request_type === 'callback'){
      if (type === 'checkbox') {
        setCallbackData({
          ...callbackData,
          [name]: checked,
        });
      } else {
        setCallbackData({
          ...callbackData,
          [name]: value,
        });
      };
    }
    if(request_type === 'partnership'){
      if (type === 'checkbox') {
        setPartnershipData({
          ...partnershipData,
          [name]: checked,
        });
      } else {
        setPartnershipData({
          ...partnershipData,
          [name]: value,
        });
      };
    }
    if(request_type === 'pricing'){
      if (type === 'checkbox') {
        setPricingQuoteData({
          ...pricingQuoteData,
          [name]: checked,
        });
      } else {
        setPricingQuoteData({
          ...pricingQuoteData,
          [name]: value,
        });
      };
    }

    if (name === 'email') {
      if (!validateEmail(value) && value.length > 0) {
        setEmailError('Please enter the email address in the format yourname@companyname.com');
        setDisableBtn(true)
      } else {
        setEmailError('');
        setDisableBtn(false)
      }
    }
  };

  const handlePhoneNumber = (val, request_type) => {
    console.log('ph: ', val)

    if(request_type === 'demo'){
      setFormData({
        ...formData,
        number: val,
      });
    }
    else if(request_type === 'callback'){
      setCallbackData({
        ...callbackData,
        number: val,
      });
    }
    else if(request_type === 'partnership'){
      setPartnershipData({
        ...partnershipData,
        number: val,
      });
    }
    else if(request_type === 'pricing'){
      setPricingQuoteData({
        ...pricingQuoteData,
        number: val,
      });
    }
  }

  const handleConfirmationDialog = (event,form_type) => {
    event.preventDefault();
    if(form_type === 'demo'){
      setMessage('Are you sure you want request a Demo?')
    }
    else if(form_type === 'callback'){
      setMessage('Are you sure you want to request a Callback?')
    }
    else if(form_type === 'partnership'){
      setMessage('Are you sure you want to take a Partnership lead?')
    }
    else if(form_type === 'pricing'){
      setMessage('Are you sure you want to do Pricing Enquiry and/or Get Quote?')
    }
    setConfirmationOpen(true);
  };

  const handleReset = (form_type) => {
    if(form_type === 'demo'){
      setFormData({
        typeOfRequest: 'Demo Request',
        leadSource: '',
        timezone: '',
        country: '',
        date: null,
        name: '',
        email:'',
        number:'',
        company:'',
        devicecount:'',
        ip:'',
        hubspot: false,
        meeting: false,
      })
    }
    else if(form_type === 'callback'){
      setCallbackData({
        name: '',
        email: '',
        number: '',
        message: '',
        type_of_request: 'call_back',
        timezone: '',
        country:'',
        start_time: '',
        agree: false
      })
    }
    else if(form_type === 'partnership'){
      setPartnershipData({
        name: '',
        email: '',
        number: '',
        description: '',
        website: '',
        address: '',
        hexnode_products: '',
        type_of_request: 'partner_signup',
        agree: false
      })
    }
    else if(form_type === 'pricing'){
      setPricingQuoteData({
        name: '',
        email: '',
        number: '',
        devices: '',
        pricing_plan: '',
        subscription: '',
        get_quote: false,
        agree: false
      })
    }
  }

  const handleConfirm = () => {
    setConfirmationOpen(false);
    handleSubmit();
  };

  const handleCancel = () => {
    setConfirmationOpen(false);
  };

  const formValidation = (data) => {
    var isValid = false;

    var validatemail = function ValidateEmail(mail) 
    {
        if (/[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,10}/.test(mail))
        {
            console.log("email is valid")
            return (true)
        }
        console.log("email is invalid")
        return (false)
    }

    

    if(
      validatemail(data.email) === false  ||
      ( data.hasOwnProperty('ip') && data.ip.length > 0 && !/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(formData.ip))
    ){
      isValid = false
    }
    else{
      isValid = true
    }
    return isValid
  }





  const handleSubmit = () => {
    // var user_details = jwtDecode(accessToken);
    var data, values, status_message;
    const formattedDate = formatting(formData.date).format('YYYY-MM-DDTHH:mm:ss[Z]');

    const sendPostRequest = async (values, status_message) => {
      try {
        const response_role = await axios.post(`${process.env.REACT_APP_BACKEND}/api/crm_form/`, values, {
          headers: {
            Authorization: 'Bearer '+accessToken ,
            },
        }).then(function (response){
          if(status_message.includes('demo')){ 
            setFormData({
              typeOfRequest: 'Demo Request',
              leadSource: '',
              timezone: '',
              country: '',
              date: null,
              name: '',
              email:'',
              number:'',
              company:'',
              devicecount:'',
              ip:'',
              hubspot: false,
              meeting: false,
            }) 
          }
          else if(status_message.includes('callback')){ 
            setCallbackData({
              name: '',
              email: '',
              number: '',
              message: '',
              type_of_request: 'call_back',
              timezone: '',
              country:'',
              start_time: '',
              agree: false
            }) 
          }
          else if(status_message.includes('partnership')){ 
            setPartnershipData({
              name: '',
              email: '',
              number: '',
              description: '',
              website: '',
              address: '',
              hexnode_products: '',
              type_of_request: 'partner_signup',
              agree: false
            }) 
          }
          else if(status_message.includes('pricing')){ 
            setPricingQuoteData({
              name: '',
              email: '',
              number: '',
              devices: '',
              pricing_plan: '',
              subscription: '',
              get_quote: false,
              agree: false
            }) 
          }
          setShowSnackbar(false)
          setActionStatus({
            severity: 'success',
            message: status_message
          })
          return response.data
        })
        
      } catch (error) {
        console.error('Error:', error);
      }
    };

    if(message.includes('Demo'))
    {
      // const formattedDate = dayjs(formData.date).format('YYYY-MM-DD hh:mm:ss');
      // const formattedDate = dayjs(formData.date).utc().format('YYYY-MM-DDTHH:mm:ss[Z]');
      const formattedDate = formatting(formData.date).format('YYYY-MM-DDTHH:mm:ss[Z]');
    
      data = {
        // id: user_details.user_id,
        type_of_request: 'demo_req',
        email: formData.email,
        devices: formData.devicecount,
        number: formData.number,
        rating_of_form: 'Demo Req',
        start_time: formattedDate,
        hubspot_actions: formData.hubspot,
        creating_meeting_event: formData.meeting,
        user_ip: formData.ip,
        location_data: {
          country_name: formData.country,
          ip: formData.ip,
          time_zone: '',
        },
        name: formData.name,
        org: formData.company,
        timezone_data: formData.timezone,
        zendesk_ticket_id: '',
        request_from_support_assist: true,
        user_lead_type: formData.leadSource,
        ticket_submitting_by: user,
      };
      values = JSON.stringify(data);
      status_message = "Created a demo request"
      console.log(values)
      sendPostRequest(values, status_message)
    }
    else if(message.includes('Callback')){
      const callbackStartDate = formatting(callbackData.start_time).format('YYYY-MM-DDTHH:mm:ss[Z]');
      data = {
        name: callbackData.name,
        email: callbackData.email,
        number: callbackData.number,
        message: callbackData.message,
        type_of_request: 'call_back',
        timezone_data: callbackData.timezone,
        ticket_submitting_by: callbackData.name,
        zendesk_ticket_id: '',
        location_data: {
          timezone: callbackData.timezone,
          country_name: callbackData.country
          },
          start_time: callbackStartDate
        };
        values = JSON.stringify(data);
        status_message = "Created a callback request"
        sendPostRequest(values, status_message)
    }
    else if(message.includes('Partnership')){
      data = {
        name: partnershipData.name,
        email: partnershipData.email,
        number: partnershipData.number,
        description: partnershipData.description,
        website: partnershipData.website,
        address: partnershipData.address,
        project:partnershipData.hexnode_products,
        type_of_request: 'partner_signup',
        ticket_submitting_by: partnershipData.name,
        zendesk_ticket_id: ''
    }
    values = JSON.stringify(data);
    status_message = "Created a partnership lead request"
    sendPostRequest(values, status_message)
  }
    else if(message.includes('Pricing')){
      var req;
      if(pricingQuoteData.get_quote === true) {req = 'get_quote_req';}
      else {req = 'pricing_enquiry_req';}

    data = {
      name: pricingQuoteData.name,
      email: pricingQuoteData.company_email,
      number: pricingQuoteData.number,
      devices: pricingQuoteData.devices,
      pricing_plan_string: pricingQuoteData.pricing_plan,
      subscription_string: pricingQuoteData.subscription,
      type_of_request: req,
      ticket_submitting_by: pricingQuoteData.name,
      zendesk_ticket_id: ''
      };
      values = JSON.stringify(data);
      status_message = "Created a pricing enquiry or/and get quote request"
      sendPostRequest(values, status_message)
    }
   
  };


  return (

    <Container maxWidth="md" sx={{mt:-3}}>
      <Typography variant="h5" textAlign="center" sx={{ mb:3 }} color='primary' >CRM Actions</Typography>
      {showSnackbar && (
          <SnackbarDialog
            severity={actionStatus.severity}
            message={actionStatus.message}
          />
        )}
        <Box sx={{ position: 'relative' , p: 2 }}>
          <Tooltip title="Reset Form" arrow>
          <IconButton
            onClick={() => handleReset('demo')}
            color="primary"
            sx={{ position: 'absolute', top: -20, right: 8 }}
          >
          <RestartAltIcon />
          </IconButton>
          </Tooltip>
          </Box>


            <SelectDropdown
              label="Type of Request"
              name="typeOfRequest"
              value={formData.typeOfRequest}
              onChange={(event) => handleFormChange(event, 'demo')}
              options={typeOfRequestOptions}
            />

      {formData.typeOfRequest === 'Demo Request' && (
      <form onSubmit={(event) => handleConfirmationDialog(event,'demo')}>
        <Grid container spacing={2} sx={{mt:0}}>
          <Grid item xs={6}>
            <TextField
              fullWidth
              label="Name"
              name="name"
              value={formData.name}
              onChange={(event) => handleFormChange(event, 'demo')}
            />
          </Grid>

          <Grid item xs={6}>
            <SelectDropdown
              label="Lead Sources"
              name="leadSource"
              value={formData.leadSource}
              onChange={(event) => handleFormChange(event, 'demo')}
              options={leadSourceOptions}
            />
          </Grid>

          <Grid item xs={6}>
            <TextField
              fullWidth
              label="Company Email"
              name="email"
              value={formData.email}
              onChange={(event) => handleFormChange(event, 'demo')}
              error={((formData.email.length>0 && Boolean(emailError)) || formData.email.length > 75)}
              helperText={emailError}
            />
          </Grid>

          <Grid item xs={6}>
            <SelectDropdown
              label="Timezone"
              name="timezone"
              value={formData.timezone}
              onChange={(event) => handleFormChange(event, 'demo')}
              options={timezoneList}
            />
          </Grid>

          <Grid item xs={6}>
          <MuiTelInput 
                  fullWidth
                  label="Phone Number"
                  defaultCountry="IN"
                  name="number"
                  value={formData.number}
                  onChange={(event) => handlePhoneNumber(event, 'demo')}
                  error={(formData.number.length > 0 && !validatePhoneNumber(formData.number)) || formData.number.replace(/\D/g, '').length > 15}
                  helperText={
                    (formData.number.length > 0 && !validatePhoneNumber(formData.number)) || formData.number.replace(/\D/g, '').length > 15
                      ? 'Phone number is not valid for the specified region'
                      : ''
                  }
               />
            {/* <TextField
              fullWidth
              label="Phone Number"
              name="number"
              type="number"
              value={formData.number}
              onChange={(event) => handleFormChange(event, 'demo')}
              error={formData.number.length > 0 && (formData.number.length < 8 || formData.number.length > 15)}
              helperText={
                formData.number.length > 0 && (formData.number.length < 8 || formData.number.length > 15)
                  ? 'Phone number must be between 8 to 15 digits'
                  : ''
              }
            /> */}
          </Grid>        

          <Grid item xs={6}>
            <SelectDropdown
              label="Country"
              name="country"
              value={formData.country}
              onChange={(event) => handleFormChange(event, 'demo')}
              options={countryData}
            />
          </Grid> 

          <Grid item xs={6}>
            <TextField
              fullWidth
              label="Company"
              name="company"
              value={formData.company}
              onChange={(event) => handleFormChange(event, 'demo')}
            />
          </Grid>       

          <Grid item xs={6}>
            <SelectDropdown
              label="Number of Devices"
              name="devicecount"
              value={formData.devicecount}
              onChange={(event) => handleFormChange(event, 'demo')}
              options={nodevicesoptions}
            />
          </Grid>

          <Grid item xs={6}>
            <TextField
              fullWidth
              label="IP Address"
              name="ip"
              value={formData.ip}
              onChange={(event) => handleFormChange(event, 'demo')}
              error={formData.ip.length > 0 && !/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(formData.ip)}
              helperText={
                formData.ip.length > 0 && !/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(formData.ip)
                  ? 'Invalid IP address format. Valid format: 192.5.3.3'
                  : ''
              }
            />
          </Grid>

          <Grid item xs={6}>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DateTimePicker
                sx={{ width: '100%' }}
                label="Date and Time"
                value={formData.date}
                onChange={(newValue) => {
                  handleFormChange({
                    target: {
                      name: 'date',
                      value: newValue,
                    },
                  },'demo');
                }}
                renderInput={(params) => (
                  <TextField
                  fullWidth
                    {...params}
                    className="full-width-picker"
                  />
                )}
              />
            </LocalizationProvider>
          </Grid>

          <Grid item xs={6}>
            <FormGroup>
            <Typography sx={{ mb:1 }}>Configurations</Typography>
              <FormControlLabel
                sx={{ ml:2}}
                control={
                  <Checkbox
                    name="hubspot"
                    checked={formData.hubspot}
                    onChange={(event) => handleFormChange(event, 'demo')}
                  />
                }
                label="Hubspot"
              />
              <FormControlLabel
                sx={{ ml:2}}
                control={
                  <Checkbox
                    name="meeting"
                    checked={formData.meeting}
                    onChange={(event) => handleFormChange(event, 'demo')}
                  />
                }
                label="Schedule Meeting"
              />
            </FormGroup>
          </Grid>

        </Grid>

        <Box display="flex" justifyContent="center" sx={{ m: 1 }}>
          <Button type="submit" variant="contained" color="primary" disabled={disableBtn}>
            Submit
          </Button>
      </Box>

      </form>
      )}

      {formData.typeOfRequest === 'Callback Request' && (
        <form  onSubmit={(event) => handleConfirmationDialog(event,'callback')}>
          <Grid container spacing={3} sx={{mt:0}}>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Name"
                name="name"
                value={callbackData.name}
                onChange={(event) => handleFormChange(event, 'callback')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Company Email"
                name="email"
                value={callbackData.email}
                onChange={(event) => handleFormChange(event, 'callback')}
                error={callbackData.email.length > 0 && Boolean(emailError)}
                helperText={emailError}
              />
            </Grid>
            <Grid item xs={6}>
              <MuiTelInput 
                  fullWidth
                  label="Phone Number"
                  defaultCountry="IN"
                  name="number"
                  value={callbackData.number}
                  onChange={(event) => handlePhoneNumber(event, 'callback')}
                  error={callbackData.number.length > 0 && !validatePhoneNumber(callbackData.number)}
                  helperText={
                    (callbackData.number.length > 0 && !validatePhoneNumber(callbackData.number)) || callbackData.number.length > 15
                      ? 'Phone number is not valid for the specified region'
                      : ''
                  }
               />
              {/* <TextField
                fullWidth
                label="Phone Number"
                name="number"
                type="number"
                value={callbackData.number}
                onChange={(event) => handleFormChange(event, 'callback')}
                error={callbackData.number.length > 0 && (callbackData.number.length < 8 || callbackData.number.length > 15)}
                helperText={
                  callbackData.number.length > 0 && (callbackData.number.length < 8 || callbackData.number.length > 15)
                    ? 'Phone number must be between 8 to 15 digits'
                    : ''
                }
              /> */}
            </Grid>
            <Grid item xs={6}>
              <SelectDropdown
                label="Timezone"
                name="timezone"
                value={callbackData.timezone}
                onChange={(event) => handleFormChange(event, 'callback')}
                options={timezoneList}
              />
            </Grid>
            <Grid item xs={6}>
            <SelectDropdown
              label="Country"
              name="country"
              value={callbackData.country}
              onChange={(event) => handleFormChange(event, 'callback')}
              options={countryData}
            />
          </Grid> 
          <Grid item xs={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DateTimePicker
                  sx={{ width: '100%' }}
                  label="Date and Time"
                  value={callbackData.start_time}
                  onChange={(newValue) => {
                    handleFormChange({
                      target: {
                        name: 'start_time',
                        value: newValue,
                      },
                    },'callback');
                  }}
                  renderInput={(params) => (
                    <TextField
                    fullWidth
                      {...params}
                      className="full-width-picker"
                    />
                  )}
                />
              </LocalizationProvider>
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="What would you like to talk about?"
                name="message"
                value={callbackData.message}
                onChange={(event) => handleFormChange(event, 'callback')}
              />
            </Grid>
            
            <Grid item xs={12}>
            <FormControlLabel
                control={
                  <Checkbox
                    name="agree"
                    checked={callbackData.agree}
                    onChange={(event) => handleFormChange(event, 'callback')}
                  />
                }
                label={
                  <Typography variant='body2'>
                    Stay up to date with Hexnode. By ticking the box, you agree to be contacted by us.{' '}
                    <Link href="https://www.hexnode.com/legal/privacy-policy/">Privacy policy</Link>
                  </Typography>
                }
              />
            </Grid>
          </Grid>
        <Box sx={{ position: 'relative' }}>
        <Box display="flex" justifyContent="flex-end">
            <Tooltip title="Reset Form" arrow>
            <IconButton
                onClick={()=>{handleReset('callback')}}
                color="primary"
                sx={{ position: 'absolute', top: 8, right: 8 }}
            >
            <RestartAltIcon />
            </IconButton>
            </Tooltip>
        </Box>

        <Box display="flex" justifyContent="center" sx={{ m: 1 }}>
          <Button type="submit" variant="contained" color="primary" disabled={disableBtn}>
            Submit
          </Button>
        </Box>
      </Box>
        </form>
      )}

      {formData.typeOfRequest === 'Partnership Lead' && (
        <form onSubmit={(event) => handleConfirmationDialog(event,'partnership')}>
          <Grid container spacing={3} sx={{mt:0}}>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Name"
                name="name"
                value={partnershipData.name}
                onChange={(event) => handleFormChange(event, 'partnership')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Company Email"
                name="email"
                value={partnershipData.email}
                onChange={(event) => handleFormChange(event, 'partnership')}
                error={partnershipData.email.length>0 && Boolean(emailError)}
                helperText={emailError}
              />
            </Grid>
            <Grid item xs={6}>
              <MuiTelInput 
                  fullWidth
                  label="Phone Number"
                  defaultCountry="IN"
                  name="number"
                  value={partnershipData.number}
                  onChange={(event) => handlePhoneNumber(event, 'partnership')}
                  error={partnershipData.number.length > 0 && !validatePhoneNumber(partnershipData.number)}
                  helperText={
                    (partnershipData.number.length > 0 && !validatePhoneNumber(partnershipData.number)) || partnershipData.number.length > 15
                      ? 'Phone number is not valid for the specified region'
                      : ''
                  }
               />
              {/* <TextField
                fullWidth
                label="Phone Number"
                name="number"
                type="number"
                value={partnershipData.number}
                onChange={(event) => handleFormChange(event, 'partnership')}
                error={partnershipData.number.length > 0 && (partnershipData.number.length < 8 || partnershipData.number.length > 15)}
                helperText={
                  partnershipData.number.length > 0 && (partnershipData.number.length < 8 || partnershipData.number.length > 15)
                    ? 'Phone number must be between 8 to 15 digits'
                    : ''
                }
              /> */}
            </Grid>
            <Grid item xs={6}>

            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Website"
                name="website"
                value={partnershipData.website}
                onChange={(event) => handleFormChange(event, 'partnership')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Address"
                name="address"
                value={partnershipData.address}
                onChange={(event) => handleFormChange(event, 'partnership')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Hexnode Products you are interested in selling"
                name="hexnode_products"
                value={partnershipData.hexnode_products}
                onChange={(event) => handleFormChange(event, 'partnership')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Is there anything else we need to know?"
                name="description"
                value={partnershipData.description}
                onChange={(event) => handleFormChange(event, 'partnership')}
              />
            </Grid>
            <Grid item xs={12}>
            <FormControlLabel
                control={
                  <Checkbox
                    name="agree"
                    checked={partnershipData.agree}
                    onChange={(event) => handleFormChange(event, 'partnership')}
                  />
                }
                label={
                  <Typography variant='body2'>
                    Stay up to date with Hexnode. By ticking the box, you agree to be contacted by us.{' '}
                    <Link href="https://www.hexnode.com/legal/privacy-policy/">Privacy policy</Link>
                  </Typography>
                }
              />
            </Grid>
          </Grid>
          <Box sx={{ position: 'relative' }}>
        <Box display="flex" justifyContent="flex-end">
            <Tooltip title="Reset Form" arrow>
            <IconButton
                onClick={()=>{handleReset('partnership')}}
                color="primary"
                sx={{ position: 'absolute', top: 8, right: 8 }}
            >
            <RestartAltIcon />
            </IconButton>
            </Tooltip>
        </Box>

        <Box display="flex" justifyContent="center" sx={{ m: 1 }}>
          <Button type="submit" variant="contained" color="primary" disabled={disableBtn}>
            Submit
          </Button>
        </Box>
      </Box>
        </form>
      )}

      {formData.typeOfRequest === 'Pricing Enquiry/Get Quote' && (
        <form  onSubmit={(event) => handleConfirmationDialog(event,'pricing')}>
          <Grid container spacing={3} sx={{mt:0}}>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Name"
                name="name"
                value={pricingQuoteData.name}
                onChange={(event) => handleFormChange(event, 'pricing')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Company Email"
                name="email"
                value={pricingQuoteData.email}
                onChange={(event) => handleFormChange(event, 'pricing')}
                error={pricingQuoteData.email.length>0 && Boolean(emailError)}
                helperText={emailError}
              />
            </Grid>
            <Grid item xs={6}>
              <MuiTelInput 
                  fullWidth
                  label="Phone Number"
                  defaultCountry="IN"
                  name="number"
                  value={pricingQuoteData.number}
                  onChange={(event) => handlePhoneNumber(event, 'pricing')}
                  error={pricingQuoteData.number.length > 0 && !validatePhoneNumber(pricingQuoteData.number)}
                  helperText={
                    (pricingQuoteData.number.length > 0 && !validatePhoneNumber(pricingQuoteData.number)) || pricingQuoteData.number.length > 15
                      ? 'Phone number is not valid for the specified region'
                      : ''
                  }
               />
              {/* <TextField
                fullWidth
                label="Phone Number"
                name="number"
                type="number"
                value={pricingQuoteData.number}
                onChange={(event) => handleFormChange(event, 'pricing')}
                error={formData.number.length > 0 && (formData.number.length < 8 || formData.number.length > 15)}
                helperText={
                  formData.number.length > 0 && (formData.number.length < 8 || formData.number.length > 15)
                    ? 'Phone number must be between 8 to 15 digits'
                    : ''
                }
              /> */}
            </Grid>
            <Grid item xs={6}>
              <SelectDropdown
                label="Number of Devices"
                name="devices"
                value={pricingQuoteData.devices}
                onChange={(event) => handleFormChange(event, 'pricing')}
                options={nodevicesoptions}
              />
            </Grid>
            <Grid item xs={6}>
              <SelectDropdown
                label="Pricing Plan"
                name="pricing_plan"
                value={pricingQuoteData.pricing_plan}
                onChange={(event) => handleFormChange(event, 'pricing')}
                options={pricingPlanOptions}
              />
            </Grid> 
            <Grid item xs={6}>
              <SelectDropdown
                label="Billing"
                name="subscription"
                value={pricingQuoteData.subscription}
                onChange={(event) => handleFormChange(event, 'pricing')}
                options={billingOptions}
              />
            </Grid> 
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Checkbox
                    name="get_quote"
                    checked={pricingQuoteData.get_quote}
                    onChange={(event) => handleFormChange(event, 'pricing')}
                  />
                }
                label={
                  <Typography variant='body2'>Get Quote</Typography>
                }
              />
            </Grid>
            <Grid item xs={12}>
                <FormControlLabel
                control={
                  <Checkbox
                    name="agree"
                    checked={pricingQuoteData.agree}
                    onChange={(event) => handleFormChange(event, 'pricing')}
                  />
                }
                label={
                  <Typography variant='body2'>
                    Stay up to date with Hexnode. By ticking the box, you agree to be contacted by us.{' '}
                    <Link href="https://www.hexnode.com/legal/privacy-policy/">Privacy policy</Link>
                  </Typography>
                }
              />
            </Grid>
          </Grid>
        <Box sx={{ position: 'relative' }}>
        <Box display="flex" justifyContent="flex-end">
            <Tooltip title="Reset Form" arrow>
            <IconButton
                onClick={()=>{handleReset('pricing')}}
                color="primary"
                sx={{ position: 'absolute', top: 8, right: 8 }}
            >
            <RestartAltIcon />
            </IconButton>
            </Tooltip>
        </Box>

        <Box display="flex" justifyContent="center" sx={{ m: 1 }}>
          <Button type="submit" variant="contained" color="primary" disabled={disableBtn}>
            Submit
          </Button>
        </Box>
      </Box>
        </form>
      )}

      <ConfirmationDialog
        open={confirmationOpen}
        onClose={handleCancel}
        onConfirm={handleConfirm}
        message={message}
      />
    </Container>
  );
}

export default App;
