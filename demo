<Grid item xs={6}>
              <TextareaField
                label="Provide reason for raising the request"
                name="description"
                value={portalUpdate.description}
                onChange={(event) => handleFormChange(event, 'portal_update')}
              />
            </Grid>
          </Grid>

          {isLoading && (
          <div className="loading-overlay">
          <div style={{ textAlign: 'center' }}>
              <CircularProgress />
              <p style={{ marginTop: '1rem', fontSize: '1.2rem', color: '#333' }}>
                Hold on... This may take up to 30 seconds.
            </p>
          </div>
        </div>
      )}


          <Box display="flex" justifyContent="center" sx={{ m: 1, mt: 3 }}>
            <Button type="reset" variant="contained" color="primary" sx={{ mr: 1 }} onClick={() => { handleReset('portal_update') }} disabled={isLoading}>
              Reset
            </Button>
            <Button type="submit" variant="contained" color="primary" disabled={portalUpdateDisableBtn}>
              Submit
            </Button>
          </Box>



useEffect(() => {
    const { description, portal_name, branch_type, tag_name, branch_name, task_url, followers } = portalUpdate;

    const requiredFields = ['description', 'portal_name', 'task_url', 'followers'];
    const allRequiredFieldsFilled = requiredFields.every(field => portalUpdate[field] !== '');

    const branchTypeConditionMet =
      (branch_type === 'master' && tag_name) ||
      (branch_type === 'other' && branch_name) ||
      branch_type === 'hotfix';
    // const isPortalNameValid = checkportalname(portal_name);
    // setPortalUpdateDisableBtn(!(allRequiredFieldsFilled && branchTypeConditionMet && isPortalNameValid && portalUpdate['followers'].length >=2));
    setPortalUpdateDisableBtn(!(allRequiredFieldsFilled && branchTypeConditionMet && portalUpdate['followers'].length >=2));
  }, [portalUpdate]);




  const handlePortalRequestSubmit = async (values) => {
    setIsLoading(true);
    try {
      const response_role = await axios.post(`${process.env.REACT_APP_BACKEND}/api/taskmanager/portal-update/`, values, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + accessToken,
        },
      });
      setShowSnackbar(false);
      setActionStatus({
        severity: 'success',
        message: 'Portal update request is submitted'
      })
    } catch (error) {
      console.error('Error:', error);
    } finally {
       setIsLoading(false);
    }

    setTimeout(() => {
      window.location.reload();
    }, 100);
  }

