// RoomCard.js
import React from 'react';
import {
  Card, CardContent, Stack, Chip, Typography, Box, Tooltip, Grid
} from '@mui/material';
import {
  People as PeopleIcon,
  DisplaySettings as DisplayIcon,
  Videocam as VideoIcon,
  Mic as AudioIcon,
  Tag as TagIcon,
  Schedule as ScheduleIcon,
  LocationOn as LocationIcon
} from '@mui/icons-material';
import ScheduleTooltip from './ScheduleToolTip';

const RoomCard = ({ room, onClick, isAvailable = true, variant = 'default' }) => {
  const colorSchemes = {
    default: {
      background: '#e3f2fd',
      backgroundHover: 'rgba(30, 136, 229, 0.08)',
      borderColor: 'rgba(30, 136, 229, 0.2)'
    },
    schedule: {
      background: '#e8f5e9',
      backgroundHover: 'rgba(46, 125, 50, 0.08)',
      borderColor: 'rgba(46, 125, 50, 0.2)'
    },
    calendar: {
      background: '#f3e5f5',
      backgroundHover: 'rgba(156, 39, 176, 0.08)',
      borderColor: 'rgba(156, 39, 176, 0.2)'
    }
  };

  const currentColorScheme = colorSchemes[variant] || colorSchemes.default;

  const cardContent = (
    <Card
      sx={{
        width: '300px',
        height: '250px',
        cursor: onClick ? 'pointer' : 'default',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        border: `1px solid ${currentColorScheme.borderColor}`,
        borderRadius: '15px',
        backgroundColor: !isAvailable && variant === 'schedule' ? 'rgba(198, 40, 40, 0.08)' : currentColorScheme.background,
        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
        transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',
        '&:hover': {
          transform: 'translateY(-5px)',
          boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
        },
      }}
      onClick={() => onClick && onClick(room)}
    >
      <CardContent sx={{ padding: 4 }}>
        <Typography variant="h5" component="div" sx={{ mb: 2, fontWeight: 'bold', display: 'flex', alignItems: 'center', gap: 1 }}>
          {room.displayName}
          {!isAvailable && variant === 'schedule' && (
            <Chip
              icon={<ScheduleIcon fontSize="small" />}
              label="Booked"
              size="small"
              sx={{
                ml: 'auto',
                backgroundColor: 'rgba(240, 85, 85, 0.08)',
                color: '#dc2626',
                '& .MuiChip-icon': {
                  color: '#dc2626'
                }
              }}
            />
          )}
          {room.is_bookable === false && (
            <Chip
              label="Blocked by Admin"
              size="small"
              color="warning"
              sx={{ ml: 'auto', backgroundColor: '#ffe0b2', color: '#ef6c00' }}
            />
          )}
        </Typography>

        <Stack spacing={1.5}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PeopleIcon color="action" fontSize="small" />
            <Typography variant="body2" color="text.secondary">
              {room.capacity ? room.capacity : 0}
            </Typography>
          </Box>

          {(room.address || room.location) && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <LocationIcon color="action" fontSize="small" />
              <Typography variant="body2" color="text.secondary">
                {room.address?.city || room.location}
              </Typography>
            </Box>
          )}

          <Stack direction="row" spacing={1} flexWrap="wrap" sx={{ gap: 1 }}>
            {room.audioDeviceName && (
              <Chip
                icon={<AudioIcon fontSize="small" />}
                label={room.audioDeviceName}
                size="small"
                sx={{
                  backgroundColor: currentColorScheme.backgroundHover
                }}
              />
            )}
            {room.videoDeviceName && (
              <Chip
                icon={<VideoIcon fontSize="small" />}
                label={room.videoDeviceName}
                size="small"
                sx={{ backgroundColor: currentColorScheme.backgroundHover }}
              />
            )}
            {room.displayDeviceName && (
              <Chip
                icon={<DisplayIcon fontSize="small" />}
                label={room.displayDeviceName}
                size="small"
                sx={{ backgroundColor: currentColorScheme.backgroundHover }}
              />
            )}
          </Stack>

          {room.tags && room.tags.length > 0 && (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>
              {room.tags.map((tag, index) => (
                <Chip
                  key={index}
                  icon={<TagIcon fontSize="small" />}
                  label={tag}
                  size="small"
                  sx={{
                    backgroundColor: 'rgba(76, 175, 80, 0.1)',
                    fontSize: '0.75rem'
                  }}
                />
              ))}
            </Box>
          )}
        </Stack>
      </CardContent>
    </Card>
  );

  return (
    <Grid item xs={12} sm={6} md={4} lg={3}>
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
        {!isAvailable && room.schedule && variant === 'schedule' ? (
          <Tooltip
            title={<ScheduleTooltip schedule={room.schedule.value[0].scheduleItems} />}
            placement="right"
            arrow
            PopperProps={{
              sx: {
                '& .MuiTooltip-tooltip': {
                  backgroundColor: 'white',
                  color: 'inherit',
                  boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                  p: 0
                }
              }
            }}
          >
            {cardContent}
          </Tooltip>
        ) : (
          cardContent
        )}
      </Box>
    </Grid>
  );
};

export default RoomCard;


// CalendarPage.js (updates only shown)
// Inside the return block:
{selectedRoom && selectedRoom.is_bookable === false && (
  <Typography color="warning.main" sx={{ fontWeight: 'bold', mb: 2 }}>
    ⚠️ This room is currently blocked by admin and cannot be reserved.
  </Typography>
)}

// Modify Reserve button:
<Button
  variant="contained"
  disabled={!selectedRoom?.is_bookable}
  onClick={() => {
    if (!selectedRoom?.is_bookable) {
      alert('This room is blocked by admin and cannot be reserved.');
      return;
    }
    setReserveDialogOpen(true);
  }}
>
  Reserve
</Button>

// Inside handleReserveSubmit()
if (!selectedRoom?.is_bookable) {
  alert("This room is currently blocked by admin.");
  return;
}
