import React, { useEffect, useState, useRef } from 'react';
import Typography from '@mui/material/Typography';
import { Container, Grid, TextField, Button, Autocomplete, Chip } from '@mui/material';
import { Box, CircularProgress } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../App.css';
import TextareaField from '../components/form/TextareaField';
import SelectDropdown from '../components/form/SelectDropdown';
import MultiSelectDropdown from '../components/form/MultiSelectDropdown';
import ConfirmationDialog from '../components/dialogs/ConfirmationDialog';
import SnackbarDialog from '../components/dialogs/SnackbarDialog';

function App({ accessToken, userPermissions }) {
  const navigate = useNavigate();
  const multiSelectRef = useRef();
  const defaultFollower = 'sivananthini.k@mitsogo.com'

  useEffect(() => {
    if (userPermissions.is_admin !== true) {
      const permissions = userPermissions.details[0].permissions;
  
      const access = permissions.reduce((accumulator, permission) => {
        if (permission.code === "can_access_task_manager") {
          return true;
        } else {
          return accumulator;
        }
      }, false);
  
      if (!access) {
        console.log('navigating to error page');
        navigate(`/error`);
      }
    } 
  }, [userPermissions]);


  const branchTypeOptions = ["master", "hotfix", "other"]
  // const tagNameOptions = ["canary", "standard", "beta", "lts", "stable"]
  const [tagNameOptions, setTagNameOptions] = useState([])
  const [selectedTag, setSelectedTag] = useState('')
  const outputTypes = ['normal','extended']
  const typeOfRequestOptions = ['Portal Update','Script Execution','Query Execution','Portal Health Check']
  // const [followerOptions, setFollowerOptions] = useState([])
  const followerOptions=['naveen.s@mitsogo.com','maria.francis@mitsogo.com']

  const [isLoading, setIsLoading] = useState(false);
  const [inputValue, setInputValue] = useState('')
  const [selectedRequest, setSelectedRequest] = useState("Portal Update")
  const [portalUpdate, setPortalUpdate] = useState({
    request_name: 'Portal Update',
    description: '',
    portal_name: '',
    branch_type: '',
    tag_name: '',
    branch_name: '',
    task_url: '',
    followers: [defaultFollower],
  });

  const [scriptExecution, setScriptExecution] = useState({
    request_name: 'Script Execution',
    description: '',
    portal_name: '',
    script_path: '',
    script_params: '',
    task_url: '',
    followers: [defaultFollower],
  });

  const [queryExecution, setQueryExecution] = useState({
    request_name: 'Query Execution',
    description: '',
    portal_name: '',
    query: '',
    output_type: '',
    task_url: '',
    followers: [defaultFollower],
  });

  const [healthCheck, setHealthCheck] = useState({
    request_name: 'Health Check',
    portal_name: '',
    resources_or_services: '',
    from_date: null,
    to_date: null,
    task_url: '',
    followers: [defaultFollower],
  });

  const [portalError, setPortalError] = useState('');
  const [healthCheckDateError, setHealthCheckDateError] = useState('')
  const [isPortalNameFocused, setIsPortalNameFocused] = useState(false)

  const [portalUpdateDisableBtn, setPortalUpdateDisableBtn] = useState(true);
  const [queryExecutionDisableBtn, setQueryExecutionDisableBtn] = useState(true);
  const [scriptExecutionDisableBtn, setScriptExecutionDisableBtn] = useState(true);
  const [healthCheckDisableBtn, setHealthCheckDisableBtn] = useState(true);
  const [message, setMessage] = useState('');
  const [confirmationOpen, setConfirmationOpen] = useState(false);
  const [actionStatus, setActionStatus] = useState({
    severity: '',
    message: ''
  })
  const [showSnackbar, setShowSnackbar] = useState(false);
/*
  useEffect(() => {
    fetchFollowers()
  }, []);
*/
  useEffect(() => {
    if (actionStatus.severity !== '' && actionStatus.message !== '') {
      setShowSnackbar(true);
    }
  }, [actionStatus]);


  var checkportalname = function (string) {

    const fullPortalName = string.split('.')

    if(fullPortalName.length !==3 || fullPortalName[1] !== 'hexnodemdm' || fullPortalName[2] !== 'com'){
      console.error("Portal name must only contain \'.hexnodemdm.com\' domain")
      return 'Portal name must only contain \'.hexnodemdm.com\' domain'
    }

    if (fullPortalName[0].length < 3 || fullPortalName[0].length > 70) {
      console.error('Portal Name must be at least 3 characters long and must  not exceed 70 characters')
      return 'Portal Name must be at least 3 characters long and must  not exceed 70 characters' 
    }

    var regex = /^[A-Za-z0-9][A-Za-z0-9_-]{1,68}[A-Za-z0-9]$/;
    if (!regex.test(fullPortalName[0])) {
      console.error('Portal Name must not begin or end with hyphen and must not contain special characters')
      return 'Portal Name must not begin or end with hyphen and must not contain special characters'
    }

    return '';
  };


  useEffect(() => {
    const { description, portal_name, branch_type, tag_name, branch_name, task_url, followers } = portalUpdate;

    const requiredFields = ['description', 'portal_name', 'task_url', 'followers'];
    const allRequiredFieldsFilled = requiredFields.every(field => portalUpdate[field] !== '');

    const branchTypeConditionMet =
      (branch_type === 'master' && tag_name) ||
      (branch_type === 'other' && branch_name) ||
      branch_type === 'hotfix';
    // const isPortalNameValid = checkportalname(portal_name);
    // setPortalUpdateDisableBtn(!(allRequiredFieldsFilled && branchTypeConditionMet && isPortalNameValid && portalUpdate['followers'].length >=2));
    setPortalUpdateDisableBtn(!(allRequiredFieldsFilled && branchTypeConditionMet && portalUpdate['followers'].length >=2));
  }, [portalUpdate]);

  useEffect(() => {
    const {portal_name} = scriptExecution;
    // console.log('script execution ', scriptExecution)
    const requiredFields = ['description', 'portal_name', 'task_url', 'followers', 'script_path'];
    const allRequiredFieldsFilled = requiredFields.every(field =>  scriptExecution[field] !== '');
    const isPortalNameValid = checkportalname(portal_name)
    // console.log("allRequiredFieldsFilled ",allRequiredFieldsFilled)
    // console.log("isPortalNameValid ",isPortalNameValid)
    if(portal_name!=='' && isPortalNameValid.length > 0){
      setPortalError("Enter a valid Portal name!")
    }else{
      setPortalError("")
    }

    setScriptExecutionDisableBtn(!(allRequiredFieldsFilled && isPortalNameValid.length==0 && scriptExecution['followers'].length >=2));
  }, [scriptExecution])

  useEffect(() => {
    const {portal_name} = queryExecution;

    const requiredFields = ['description', 'portal_name', 'task_url', 'followers', 'query', 'output_type'];
    const allRequiredFieldsFilled = requiredFields.every(field => queryExecution[field] !== '');
    const isPortalNameValid = checkportalname(portal_name)
    if(portal_name!=='' && isPortalNameValid.length > 0){
      setPortalError("Enter a valid Portal name!")
    }else{
      setPortalError("")
    }

    setQueryExecutionDisableBtn(!(allRequiredFieldsFilled && isPortalNameValid.length==0 && queryExecution['followers'].length >=2));
  }, [queryExecution])

  useEffect(() => {

    const requiredFields = ['portal_name', 'followers', 'resources_or_services', 'task_url'];
    const allRequiredFieldsFilled = requiredFields.every(field => healthCheck[field] !== '');
    let dateCheck = healthCheck['from_date'] != null && healthCheck['to_date'] != null;

    if(healthCheck['from_date'] > healthCheck['to_date']){
      setHealthCheckDateError('To date should be on or after From date')
      dateCheck = false
    }
    else{
      setHealthCheckDateError('')
    }

    setHealthCheckDisableBtn(!(allRequiredFieldsFilled && healthCheck['followers'].length >=2 && dateCheck));
  }, [healthCheck])
/*
  const fetchFollowers = async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/taskmanager/followers/`, {
        headers: {
          Authorization: 'Bearer ' + accessToken
        },
      });

      setFollowerOptions(response.data);

    } catch (error) {
      console.error('Error:', error);
    }
  }
*/
  const fetchTags = async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/build_release_table/`, {
        headers: {
          Authorization: 'Bearer ' + accessToken
        },
      });

      const tags = response.data.build_table.map(row => `${row.current_release} - ${row.group_name}`)
      setTagNameOptions(tags)

    } catch (error) {
      setShowSnackbar(false);
      setActionStatus({
        severity: 'error',
        message: 'Failed to fetch tags'
      })
    }
  }

  const handleBackspacePortalName = (request_type) => {
    if (request_type === 'portal_update'){
      const newValue = portalUpdate.portal_name
        .split(',')
        .slice(0, -1)
        .join(',')
        .trim();
  
      setPortalUpdate({
        ...portalUpdate,
        portal_name: newValue
      });
    }
    else if (request_type === 'health_check'){
      const newValue = healthCheck.portal_name
        .split(',')
        .slice(0, -1)
        .join(',')
        .trim();
  
      setHealthCheck({
        ...healthCheck,
        portal_name: newValue
      });
    }
  }

  const handleFormChange = (event, request_type) => {
    const { name, value } = event.target;
    
    if (request_type === 'portal_update') {
      if(name === 'portal_name'){
        let newValue = value.trim()
        if(newValue === ''){
          setPortalError("")
          setPortalUpdate((prevData) => ({
            ...prevData,
            portal_name: prevData.portal_name
          }));
          return;
        }
        newValue = newValue.endsWith('.hexnodemdm.com') ? newValue : `${newValue}.hexnodemdm.com`
        
        const isPortalNameValid = checkportalname(newValue)
        if(isPortalNameValid !== ''){
          setPortalError(`${isPortalNameValid}`)
          return;
        }

        if(portalUpdate.portal_name.split(',').map(item => item.trim()).indexOf(newValue) > -1){
          setPortalError(`${newValue} is already added.`)
          setPortalUpdate((prevData) => ({
            ...prevData,
            portal_name: prevData.portal_name
          }));
          return;
        }
        
        setPortalError("")
        setPortalUpdate((prevData) => ({
          ...portalUpdate,
          portal_name: prevData.portal_name ? `${prevData.portal_name}, ${newValue}` : newValue
        }));
      }
      else if(name === 'tag_name'){
        setSelectedTag(value)
        const formattedTagName = `${value.replace('_MDM','').split('-')[0].trim()}_update.tar.gz`
        setPortalUpdate({
          ...portalUpdate,
          [name]: formattedTagName,
        });
      }
      else{
        setPortalUpdate({
          ...portalUpdate,
          [name]: value,
        });
      }
    }

    if (request_type === 'script_execution') {
      setScriptExecution({
        ...scriptExecution,
        [name]: value,
      });
    }

    if (request_type === 'query_execution') {
      setQueryExecution({
        ...queryExecution,
        [name]: value,
      });
    }
  
    if (request_type === 'health_check') {
      if(name === 'portal_name'){
        let newValue = value.trim()
        if(newValue === ''){
          setPortalError("")
          setHealthCheck((prevData) => ({
            ...prevData,
            portal_name: prevData.portal_name
          }));
          return;
        }
        newValue = newValue.endsWith('.hexnodemdm.com') ? newValue : `${newValue}.hexnodemdm.com`
        
        const isPortalNameValid = checkportalname(newValue)
        if(isPortalNameValid !== ''){
          setPortalError(`${isPortalNameValid}`)
          return;
        }

        if(healthCheck.portal_name.split(',').map(item => item.trim()).indexOf(newValue) > -1){
          setPortalError(`${newValue} is already added.`)
          setHealthCheck((prevData) => ({
            ...prevData,
            portal_name: prevData.portal_name
          }));
          return;
        }
        
        setPortalError("")
        setHealthCheck((prevData) => ({
          ...healthCheck,
          portal_name: prevData.portal_name ? `${prevData.portal_name}, ${newValue}` : newValue
        }));
      }
      else {
        setHealthCheck({
          ...healthCheck,
          [name]: value,
        });
      }
    }
  }

  const handleBranchChange = (event) => {
    // console.log(event);
    if(event.target.value === 'master' && tagNameOptions.length === 0){
      fetchTags();
    }
  }

  const handleMultiSelectChange = (selectedValues, form_type) => {
    if(!selectedValues.includes(defaultFollower)){
      return
    }else if(form_type === 'portal_update'){
      setPortalUpdate({
        ...portalUpdate,
        'followers': selectedValues
      })
    }
    else if(form_type === 'script_execution'){
      setScriptExecution({
        ...scriptExecution,
        'followers': selectedValues
      })
    }
    else if(form_type === 'query_execution'){
      setQueryExecution({
        ...queryExecution,
        'followers': selectedValues
      })
    }
    else if(form_type === 'health_check'){
      setHealthCheck({
        ...healthCheck,
        'followers': selectedValues
      })
    }
  };

  const handleReset = (request_type) => {
    multiSelectRef.current.reset();
    setPortalError('');
    
    if (request_type === 'portal_update') {
      setPortalUpdate({
        request_name: 'Portal Update',
        description: '',
        portal_name: '',
        branch_type: '',
        tag_name: '',
        branch_name: '',
        task_url: '',
        followers: [defaultFollower],
      })
    }
    if (request_type === 'script_execution') {
      setScriptExecution({
        request_name: 'Script Execution',
        description: '',
        portal_name: '',
        script_path: '',
        script_params: '',
        task_url: '',
        followers: [defaultFollower],
      })
    }
    if (request_type === 'query_execution') {
      setQueryExecution({
        request_name: 'Query Execution',
        description: '',
        portal_name: '',
        query: '',
        output_type: '',
        task_url: '',
        followers: [defaultFollower],
      })
    }
    if (request_type === 'health_check'){
      setHealthCheck({
        request_name: 'Health Check',
        portal_name: '',
        resources_or_services: '',
        from_date: null,
        to_date: null,
        task_url: '',
        followers: [defaultFollower],
      })
    }
  }

  const handleConfirmationDialog = (event, form_type) => {
    event.preventDefault();
    if (form_type === 'portal_update') {
      setMessage('Are you sure you want request for portal update?')
    } else if (form_type === 'script_execution') {
      setMessage('Are you sure you want request for Script Execution?')
    } else if (form_type === 'query_execution') {
      setMessage('Are you sure you want request for Query Execution?')
    } else if (form_type === 'health_check') {
      setMessage('Are you sure you want request for Portal Health Check?')
    }
    setConfirmationOpen(true);
  };

  const handleConfirm = () => {
    setConfirmationOpen(false);

    if (selectedRequest === 'Script Execution') {
      var data = {
        "request_name": "CART - Script Execution",
        "description": scriptExecution.description,
        "params": {
          "portal_name/s": scriptExecution.portal_name,
          "script_path": scriptExecution.script_path,
          "script_params": scriptExecution.script_params.replace(/\n/g, " "),
          "task_url": scriptExecution.task_url,
        },
        "followers": scriptExecution.followers
      }
      var scriptExecutionJson = JSON.stringify(data);
      handleReset("script_execution");
      handleScriptExecutionSubmit(scriptExecutionJson);
    } else if (selectedRequest === 'Query Execution') {
      var data = {
        "request_name": "CART - Query Execution",
        "description": queryExecution.description,
        "params": {
          "portal_name/s": queryExecution.portal_name,
          "query": queryExecution.query,
          "output_type": queryExecution.output_type,
          "task_url": queryExecution.task_url,
        },
        "followers": queryExecution.followers
      }
      var queryExecutionJson = JSON.stringify(data);
      handleReset("query_execution");
      handleQueryExecutionSubmit(queryExecutionJson);
    } else if (selectedRequest === 'Portal Update') {
      // if (portalUpdate.branch_type === "master") {

      //   try {
      //     axios.get(`${process.env.REACT_APP_BACKEND}/api/build_release_table/`, {
      //       headers: {
      //         'Content-type': 'application/json',
      //         Authorization: 'Bearer ' + accessToken,
      //       },
      //     }).then(response => {
      //       let release_name;
      //       for (let build_type of response.data.build_table) {

      //         if (build_type['group_name'] === portalUpdate.tag_name) {
      //           release_name = build_type['current_release']

      //           var data = {
      //             "request_name": "CART - Portal Update",
      //             "description": portalUpdate.description,
      //             "params": {
      //               "portal_name": portalUpdate.portal_name,
      //               "branch_type": portalUpdate.branch_type,
      //               "tag_name": release_name,
      //               "branch_name": portalUpdate.branch_name,
      //               "task_url": portalUpdate.task_url,
      //             },
      //             "followers": portalUpdate.followers
      //           }
      //           var portalUpdateJson = JSON.stringify(data);
      //           handleReset("portal_update");
      //           handlePortalRequestSubmit(portalUpdateJson);
      //           break;
      //         }
      //       }

      //     });


      //   } catch (error) {
      //     console.error('Error:', error);
      //   }
      // }
      // else {
        const portal_names = portalUpdate.portal_name //.split(",").map(value => value.trim());
        // console.log("portal names ",portal_names)
        setPortalError("");
        var data = {
          "request_name": "CART - Portal Update",
          "description": portalUpdate.description,
          "params": {
            "portal_name/s": portal_names,
            "branch_type": portalUpdate.branch_type,
            "tag_name": portalUpdate.tag_name,
            "branch_name": portalUpdate.branch_name,
            "task_url": portalUpdate.task_url,
          },
          "followers": portalUpdate.followers
        }
        var portalUpdateJson = JSON.stringify(data);
        // console.log(portalUpdateJson)
        handleReset("portal_update");
        handlePortalRequestSubmit(portalUpdateJson);
      // }
    } else if (selectedRequest === 'Portal Health Check') {
      var data = {
        "request_name": "CART - Portal Health Check",
        "params": {
          "portal_name/s": healthCheck.portal_name,
          "resources_or_services": healthCheck.resources_or_services,
          "from_date": healthCheck.from_date.format('YYYY-MM-DD'),
          "to_date": healthCheck.to_date.format('YYYY-MM-DD'),
          "task_url": healthCheck.task_url,
        },
        "followers": healthCheck.followers
      }
      var healthCheckJson = JSON.stringify(data);
      handleReset("health_check");
      handleHealthCheckSubmit(healthCheckJson)
    }
  };

  const handleCancel = () => {
    setConfirmationOpen(false);
  };

  const handlePortalRequestSubmit = async (values) => {
    setIsLoading(true);
    try {
      const response_role = await axios.post(`${process.env.REACT_APP_BACKEND}/api/taskmanager/portal-update/`, values, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + accessToken,
        },
      });
      setShowSnackbar(false);
      setActionStatus({
        severity: 'success',
        message: 'Portal update request is submitted'
      })
    } catch (error) {
      console.error('Error:', error);
    } finally {
       setIsLoading(false);
    }

    setTimeout(() => {
      window.location.reload();
    }, 100);
  }

  const handleQueryExecutionSubmit = async (values) => {
    try {
      const response_role = await axios.post(`${process.env.REACT_APP_BACKEND}/api/taskmanager/query-execution/`, values, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + accessToken,
        },
      });
      setShowSnackbar(false);
      setActionStatus({
        severity: 'success',
        message: 'Query Execution request is submitted'
      })
    } catch (error) {
      console.error('Error:', error);
    }
  }

  const handleScriptExecutionSubmit = async (values) => {
    try {
      const response_role = await axios.post(`${process.env.REACT_APP_BACKEND}/api/taskmanager/script-execution/`, values, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + accessToken,
        },
      });
      setShowSnackbar(false);
      setActionStatus({
        severity: 'success',
        message: 'Script execution request is submitted'
      })
    } catch (error) {
      console.error('Error:', error);
    }
  }

  const handleHealthCheckSubmit = (values) => {
    axios.post(`${process.env.REACT_APP_BACKEND}/api/taskmanager/health-check/`, values, {
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + accessToken,
      },
    })
    .then(response => {
      setShowSnackbar(false);
      setActionStatus({
        severity: 'success',
        message: 'Health Check request is submitted'
      })
    })
    .catch(error => {
      console.error('Error:', error);
      setActionStatus({
        severity: 'error',
        message: 'Failed to submit Health Check request'
      })
    });
  }

  const handleDeleteChip = (nameToRemove, request_type) => {
    if (request_type === "portal_update"){
      const updatedNames = portalUpdate.portal_name
        .split(',')
        .map((name) => name.trim())
        .filter((name) => name !== nameToRemove)
        .join(', ');
  
      setPortalUpdate((prevData) => {
        return {
          ...prevData,
          portal_name: updatedNames,
        }
      })
    }
    else if (request_type === "health_check"){
      const updatedNames = healthCheck.portal_name
        .split(',')
        .map((name) => name.trim())
        .filter((name) => name !== nameToRemove)
        .join(', ');
  
      setHealthCheck((prevData) => {
        return {
          ...prevData,
          portal_name: updatedNames,
        }
      })
    }
  }

  return (

    <Container maxWidth="md" sx={{ mt: -3 }}>
      <Typography variant="h5" textAlign="center" sx={{ mb: 3 }} color='primary' >CART Team Requests</Typography>

      <SelectDropdown
        label="Type of Request"
        name="request_name"
        value={selectedRequest}
        onChange={(event) => setSelectedRequest(event.target.value)}
        options={typeOfRequestOptions}
      />
      {selectedRequest === 'Portal Update' &&
        <form onSubmit={(event) => handleConfirmationDialog(event, 'portal_update')}>
          <Grid container spacing={3} sx={{ mt: 0 }}>
            <Grid item xs={6}>

              <Autocomplete
                clearIcon={false}
                options={[]}
                freeSolo
                multiple
                allowDuplicate
                filterSelectedOptions={false}
                value={
                  portalUpdate.portal_name
                    ? portalUpdate.portal_name.split(',').map(item => `${item},`)
                    : []
                }
                filterOptions={(x) => x} 
                renderTags={(value, props) =>
                  portalUpdate.portal_name.split(',')
                  .map((name) => name.trim())
                  .map((option, index) => (
                    <Chip
                      key={index}
                      label={option}
                      {...props({ index })}
                      onDelete={ () => {handleDeleteChip(option, 'portal_update')}}
                    />
                  ))
                }
                renderInput={(params) => {
                  return(
                    <TextField
                      multiline
                      onFocus={() => setIsPortalNameFocused(true)}
                      onBlur={() => setIsPortalNameFocused(false)}
                      label="Portal Names"
                      name="portal_name"
                      value={inputValue}
                      onKeyDown={(event) => {
                        if (event.key === 'Enter') {
                          handleFormChange(event, 'portal_update');
                          setInputValue('');
                          event.preventDefault();
                        }
                        else if (event.key === 'Backspace' && !event.target.value){
                          handleBackspacePortalName('portal_update');
                        }
                      }}
                      helperText={portalError ? portalError : (isPortalNameFocused && 'Press Enter to add each portal name')}
                      error={portalError}
                      {...params}
                      sx={{
                        '& .MuiInputBase-root': {
                          minHeight: 73,
                          alignItems: 'flex-start',
                        },
                      }}
                    />
                  );
                }}
              />

            </Grid>
            <Grid item xs={6}>
              {/* <SelectDropdown
                label="Follower"
                name="followers"
                value={portalUpdate.followers}
                onChange={(event) => handleFormChange(event, 'portal_update')}
                options={followerOptions}
              /> */}
              <MultiSelectDropdown
                ref={multiSelectRef}
                errorText={portalUpdate.followers.length<2?"Please select at least two followers.":null}
                label="Followers"
                value={portalUpdate.followers}
                onChange={(event) => handleMultiSelectChange(event, 'portal_update')}
                options={followerOptions}
              />
            </Grid>
            <Grid item xs={6}>
              <SelectDropdown
                label="Branch Type"
                name="branch_type"
                value={portalUpdate.branch_type}
                onChange={(event) => {
                  handleFormChange(event, 'portal_update')
                  handleBranchChange(event)
                }}
                options={branchTypeOptions}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Task URL"
                name="task_url"
                value={portalUpdate.task_url}
                onChange={(event) => handleFormChange(event, 'portal_update')}
              />
            </Grid>
            {portalUpdate.branch_type === "master" &&
              <Grid item xs={6}>
                <SelectDropdown
                  label="Tag Name"
                  name="tag_name"
                  value={selectedTag}
                  onChange={(event) => handleFormChange(event, 'portal_update')}
                  options={tagNameOptions}
                />
              </Grid>
            }
            {portalUpdate.branch_type === "other" &&
              <Grid item xs={6}>
                <TextField
                  fullWidth
                  label="Branch Name"
                  name="branch_name"
                  value={portalUpdate.branch_name}
                  onChange={(event) => handleFormChange(event, 'portal_update')}
                />
              </Grid>
            }
            <Grid item xs={6}>
              <TextareaField
                label="Provide reason for raising the request"
                name="description"
                value={portalUpdate.description}
                onChange={(event) => handleFormChange(event, 'portal_update')}
              />
            </Grid>
          </Grid>

          {isLoading && (
          <div className="loading-overlay">
          <div style={{ textAlign: 'center' }}>
              <CircularProgress />
              <p style={{ marginTop: '1rem', fontSize: '1.2rem', color: '#333' }}>
                Hold on... This may take up to 30 seconds.
            </p>
          </div>
        </div>
      )}


          <Box display="flex" justifyContent="center" sx={{ m: 1, mt: 3 }}>
            <Button type="reset" variant="contained" color="primary" sx={{ mr: 1 }} onClick={() => { handleReset('portal_update') }} disabled={isLoading}>
              Reset
            </Button>
            <Button type="submit" variant="contained" color="primary" disabled={portalUpdateDisableBtn}>
              Submit
            </Button>
          </Box>
        </form>
      }
      {selectedRequest === 'Script Execution' &&
        <form onSubmit={(event) => handleConfirmationDialog(event, 'script_execution')}>
          <Grid container spacing={3} sx={{ mt: 0 }}>
            <Grid item xs={6}>

              <TextField
                fullWidth
                label="Portal Name"
                name="portal_name"
                value={scriptExecution.portal_name}
                onChange={(event) => handleFormChange(event, 'script_execution')}
                error={scriptExecution.portal_name.length > 0 && Boolean(portalError)}
                helperText={portalError}
              />
            </Grid>
            <Grid item xs={6}>
              {/* <SelectDropdown
                label="Followers"
                name="followers"
                value={scriptExecution.followers}
                onChange={(event) => handleFormChange(event, 'script_execution')}
                options={followerOptions}
              /> */}
               <MultiSelectDropdown
                ref={multiSelectRef}
                errorText={scriptExecution.followers.length<2?"Please select at least two followers.":null}
                label="Followers"
                value={scriptExecution.followers}
                onChange={(event) => handleMultiSelectChange(event, 'script_execution')}
                options={followerOptions}
                
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Script Path"
                name="script_path"
                value={scriptExecution.script_path}
                onChange={(event) => handleFormChange(event, 'script_execution')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Task URL"
                name="task_url"
                value={scriptExecution.task_url}
                onChange={(event) => handleFormChange(event, 'script_execution')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Script Params"
                name="script_params"
                value={scriptExecution.script_params}
                onChange={(event) => handleFormChange(event, 'script_execution')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Provide reason for raising the request"
                name="description"
                value={scriptExecution.description}
                onChange={(event) => handleFormChange(event, 'script_execution')}
              />
            </Grid>
          </Grid>

          <Box display="flex" justifyContent="center" sx={{ m: 1, mt: 3 }}>
            <Button type="reset" variant="contained" color="primary" sx={{ mr: 1 }} onClick={() => { handleReset('script_execution') }}>
              Reset
            </Button>
            <Button type="submit" variant="contained" color="primary" disabled={scriptExecutionDisableBtn}>
              Submit
            </Button>
          </Box>
        </form>
      }
      {selectedRequest === 'Query Execution' &&
        <form onSubmit={(event) => handleConfirmationDialog(event, 'query_execution')}>
          <Grid container spacing={3} sx={{ mt: 0 }}>
            <Grid item xs={6}>

              <TextField
                fullWidth
                label="Portal Name"
                name="portal_name"
                value={queryExecution.portal_name}
                onChange={(event) => handleFormChange(event, 'query_execution')}
                error={queryExecution.portal_name.length > 0 && Boolean(portalError)}
                helperText={portalError}
              />
            </Grid>
            <Grid item xs={6}>
              {/* <SelectDropdown
                label="Followers"
                name="followers"
                value={queryExecution.followers}
                onChange={(event) => handleFormChange(event, 'query_execution')}
                options={followerOptions}
              /> */}
              <MultiSelectDropdown
                ref={multiSelectRef}
                errorText={queryExecution.followers.length<2?"Please select at least two followers.":null}
                label="Followers"
                value={queryExecution.followers}
                onChange={(event) => handleMultiSelectChange(event, 'query_execution')}
                options={followerOptions}
              />
            </Grid>
            <Grid item xs={6}>
              <SelectDropdown
                label="Output Type"
                name="output_type"
                value={queryExecution.output_type}
                onChange={(event) => handleFormChange(event, 'query_execution')}
                options={outputTypes}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Task URL"
                name="task_url"
                value={queryExecution.task_url}
                onChange={(event) => handleFormChange(event, 'query_execution')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Query"
                name="query"
                value={queryExecution.query}
                onChange={(event) => handleFormChange(event, 'query_execution')}
              />
            </Grid>
            <Grid item xs={6}>
              <TextareaField
                label="Provide reason for raising the request"
                name="description"
                value={queryExecution.description}
                onChange={(event) => handleFormChange(event, 'query_execution')}
              />
            </Grid>
          </Grid>

          <Box display="flex" justifyContent="center" sx={{ m: 1, mt: 3 }}>
            <Button type="reset" variant="contained" color="primary" sx={{ mr: 1 }} onClick={() => { handleReset('query_execution') }}>
              Reset
            </Button>
            <Button type="submit" variant="contained" color="primary" disabled={queryExecutionDisableBtn}>
              Submit
            </Button>
          </Box>
        </form>
      }
      { selectedRequest === 'Portal Health Check' &&
        <form onSubmit={(event) => handleConfirmationDialog(event, 'health_check')}>
          <Grid container spacing={3} sx={{ mt: 0 }}>
            <Grid item xs={6}>
              <Autocomplete
                clearIcon={false}
                options={[]}
                freeSolo
                multiple
                allowDuplicate
                filterSelectedOptions={false}
                value={
                  healthCheck.portal_name
                    ? healthCheck.portal_name.split(',').map(item => `${item},`)
                    : []
                }
                filterOptions={(x) => x} 
                renderTags={(value, props) =>
                  healthCheck.portal_name.split(',')
                  .map((name) => name.trim())
                  .map((option, index) => (
                    <Chip
                      key={index}
                      label={option}
                      {...props({ index })}
                      onDelete={ () => {handleDeleteChip(option, "health_check")}}
                    />
                  ))
                }
                renderInput={(params) => {
                  return(
                    <TextField
                      multiline
                      onFocus={() => setIsPortalNameFocused(true)}
                      onBlur={() => setIsPortalNameFocused(false)}
                      label="Portal Names"
                      name="portal_name"
                      value={inputValue}
                      onKeyDown={(event) => {
                        if (event.key === 'Enter') {
                          handleFormChange(event, 'health_check');
                          setInputValue('');
                          event.preventDefault();
                        }
                        else if (event.key === 'Backspace' && !event.target.value){
                          handleBackspacePortalName('health_check');
                        }
                      }}
                      helperText={portalError ? portalError : (isPortalNameFocused && 'Press Enter to add each portal name')}
                      error={portalError}
                      {...params}
                      sx={{
                        '& .MuiInputBase-root': {
                          minHeight: 73,
                          alignItems: 'flex-start',
                        },
                      }}
                    />
                  );
                }}
              />
            </Grid>

            <Grid item xs={6}>
               <MultiSelectDropdown
                ref={multiSelectRef}
                errorText={healthCheck.followers.length<2?"Please select at least two followers.":null}
                label="Followers"
                value={healthCheck.followers}
                onChange={(event) => handleMultiSelectChange(event, 'health_check')}
                options={followerOptions}
              />
            </Grid>

            <Grid item xs={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  format="DD/MM/YYYY"
                  label="From date"
                  name="from_date"
                  sx={{ width: '100%' }}
                  value={healthCheck.from_date}
                  onChange={(newValue) => handleFormChange({
                    target: {
                      name: "from_date",
                      value: newValue
                    }}, 'health_check'
                  )}
                  maxDate={dayjs()}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  format="DD/MM/YYYY"
                  label="To date"
                  name="to_date"
                  sx={{ width: '100%' }}
                  value={healthCheck.to_date}
                  onChange={(newValue) => handleFormChange({
                    target: {
                      name: "to_date",
                      value: newValue
                    }}, 'health_check'
                  )}
                  maxDate={dayjs()}
                  minDate={healthCheck.from_date || null}
                  slotProps={{
                    textField: {
                      helperText: healthCheckDateError !== '' && healthCheckDateError
                    },
                  }}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                label="Task URL"
                name="task_url"
                value={healthCheck.task_url}
                onChange={(event) => handleFormChange(event, 'health_check')}
              />
            </Grid>

            <Grid item xs={6}>
              <TextareaField
                fullWidth
                label="Resources or Services"
                name="resources_or_services"
                value={healthCheck.resources_or_services}
                onChange={(event) => handleFormChange(event, 'health_check')}
                placeholder="Eg: Celery Queue, Apache and Resources (CPU, memory)"
              />
            </Grid>

          </Grid>

          <Box display="flex" justifyContent="center" sx={{ m: 1, mt: 3 }}>
            <Button type="reset" variant="contained" color="primary" sx={{ mr: 1 }} onClick={() => { handleReset('health_check') }}>
              Reset
            </Button>
            <Button type="submit" variant="contained" color="primary" disabled={healthCheckDisableBtn}>
              Submit
            </Button>
          </Box>
        </form>
      }
      <ConfirmationDialog
        open={confirmationOpen}
        onClose={handleCancel}
        onConfirm={handleConfirm}
        message={message}
      />
      {showSnackbar && (
        <SnackbarDialog
          severity={actionStatus.severity}
          message={actionStatus.message}
        />
      )}
    </Container>
  );
}

export default App;
