from django.utils import timezone
from django.db import transaction

def sync_users(self):
    try:
        wordpress_users = self.get_users_from_service()
        existing_emails = [user['user_email'] for user in wordpress_users]
        count_users = len(existing_emails)
        logger.info(f"Count : {count_users}")

        if count_users == 0:
            logger.warning("No users found. Skipping cost per user calculation.")
            cost_per_user = 0
        else:
            cost_per_user = 300 / count_users

        # 1. Deactivate users not in WordPress
        PermissionMapper.objects.filter(
            service=self.service
        ).exclude(
            employee__email__in=existing_emails
        ).update(
            active=False,
            deactivate_time=timezone.now()
        )

        # 2. Load existing employees (only those needed)
        existing_employees = {
            e.email: e for e in Employee.objects.filter(email__in=existing_emails)
        }

        employees_to_create = []
        employees_to_update = []

        for user in wordpress_users:
            email = user['user_email']
            display_name = user['display_name']

            if email in existing_employees:
                emp = existing_employees[email]
                if emp.display_name != display_name:  # ðŸ”‘ Only update if changed
                    emp.display_name = display_name
                    employees_to_update.append(emp)
            else:
                employees_to_create.append(Employee(email=email, display_name=display_name))

        with transaction.atomic():
            if employees_to_create:
                Employee.objects.bulk_create(employees_to_create, batch_size=500)

            if employees_to_update:
                Employee.objects.bulk_update(employees_to_update, ['display_name'], batch_size=500)

        # 3. Handle PermissionMapper only if needed
        existing_mappers = {
            p.employee.email: p for p in PermissionMapper.objects.filter(
                service=self.service,
                employee__email__in=existing_emails
            )
        }

        mappers_to_create = []
        mappers_to_update = []

        for user in wordpress_users:
            email = user['user_email']
            employee = existing_employees.get(email) or next(
                (e for e in employees_to_create if e.email == email), None
            )

            mapper = existing_mappers.get(email)

            if not mapper and employee:
                mappers_to_create.append(
                    PermissionMapper(employee=employee, service=self.service, active=True)
                )
            elif mapper and not mapper.active:  # ðŸ”‘ Only reactivate if needed
                mapper.active = True
                mapper.deactivate_time = None
                mappers_to_update.append(mapper)

        with transaction.atomic():
            if mappers_to_create:
                PermissionMapper.objects.bulk_create(mappers_to_create, batch_size=500)

            if mappers_to_update:
                PermissionMapper.objects.bulk_update(
                    mappers_to_update, ['active', 'deactivate_time'], batch_size=500
                )

    except Exception as e:
        logger.error(
            f"Error syncing users for service {self.service_name}: {e}",
            exc_info=True
        )
        raise
