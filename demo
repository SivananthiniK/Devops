import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Container,
  CircularProgress,
  Paper,
  Button,
  Dialog,
  DialogActions,
  DialogTitle,
} from '@mui/material';
import RoomCard from '../components/RoomCard';
import Calendar from '../components/Calendar';
import axios from 'axios';

function LoadingSpinner() {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      height="100vh"
    >
      <CircularProgress />
    </Box>
  );
}

const CalendarPage = ({ idToken }) => {
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [rooms, setRooms] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const [dialogOpen, setDialogOpen] = useState(false);
  const [confirmAction, setConfirmAction] = useState(null); // 'restrict' or 'allow'

  useEffect(() => {
    const fetchRooms = () => {
      axios.get(`${process.env.REACT_APP_BACKEND_URL}/rooms/`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: 'Bearer ' + idToken,
          token: 'Bearer ' + localStorage.getItem('jwtToken')
        }
      })
        .then(response => {
          setRooms(response.data.rooms);
          setIsLoading(false);
        })
        .catch(err => {
          console.error('Error fetching rooms:', err);
          setError("You don't have permission to view this. For more information, Contact Devops Team");
          setIsLoading(false);
        });
    };
    fetchRooms();
  }, []);

  const handleRoomSelect = (room) => {
    setSelectedRoom(room);
  };

  const toggleRoomBooking = async (room, newStatus) => {
    try {
      const response = await axios.patch(
        `${process.env.REACT_APP_BACKEND_URL}/rooms/${room.id}/`,
        { is_bookable: newStatus },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: 'Bearer ' + idToken,
            token: 'Bearer ' + localStorage.getItem('jwtToken')
          }
        }
      );
      setSelectedRoom({ ...room, is_bookable: newStatus }); // update local state
    } catch (error) {
      console.error('Failed to update booking status:', error);
    }
  };

  const handleRestrictAllowClick = (action) => {
    setConfirmAction(action);
    setDialogOpen(true);
  };

  const handleDialogConfirm = () => {
    if (confirmAction === 'restrict') {
      toggleRoomBooking(selectedRoom, false);
    } else {
      toggleRoomBooking(selectedRoom, true);
    }
    setDialogOpen(false);
    setConfirmAction(null);
  };

  const handleDialogCancel = () => {
    setDialogOpen(false);
    setConfirmAction(null);
  };

  if (isLoading) return <LoadingSpinner />;

  if (error) {
    return (
      <Paper elevation={3} sx={{ p: 3, textAlign: 'center', maxWidth: 400, mx: 'auto', mt: 4 }}>
        <Typography color="error" gutterBottom>{error}</Typography>
        <Button variant="contained" onClick={() => window.location.reload()} sx={{ mt: 2 }}>
          Retry
        </Button>
      </Paper>
    );
  }

  return (
    <Container
      maxWidth="xl"
      sx={{
        height: 'calc(100vh - 48px)',
        overflow: 'hidden',
        mb: 6
      }}
    >
      <Box
        sx={{
          py: 4,
          height: '100%',
          overflow: 'auto',
          '&::-webkit-scrollbar': { display: 'none' },
          scrollbarWidth: 'none',
          msOverflowStyle: 'none'
        }}
      >
        <Box sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          width: '100%'
        }}>
          <Typography
            variant="body1"
            gutterBottom
            sx={{ fontSize: '1.8rem', fontWeight: 'bold', mb: 3 }}
          >
            {selectedRoom ? `${selectedRoom.displayName}` : 'Select a Room'}
          </Typography>
        </Box>

        {!selectedRoom && (
          <Grid container spacing={3}>
            {rooms.map(room => (
              <RoomCard
                key={room.id}
                room={room}
                onClick={handleRoomSelect}
                variant="calendar"
              />
            ))}
          </Grid>
        )}

        {selectedRoom && (
          <>
            {/* ⬇️ RESTRICT/ALLOW BUTTON */}
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
              <Button
                variant="contained"
                color={selectedRoom.is_bookable ? "error" : "success"}
                onClick={() =>
                  handleRestrictAllowClick(selectedRoom.is_bookable ? 'restrict' : 'allow')
                }
              >
                {selectedRoom.is_bookable ? 'Restrict' : 'Allow'}
              </Button>
            </Box>

            {/* ⬇️ CALENDAR DISPLAY */}
            <Calendar
              initialRoom={selectedRoom}
              onBack={() => setSelectedRoom(null)}
              idToken={idToken}
            />
          </>
        )}

        {/* ⬇️ CONFIRMATION DIALOG */}
        <Dialog open={dialogOpen} onClose={handleDialogCancel}>
          <DialogTitle>
            Are you sure you want to {confirmAction === 'restrict' ? 'restrict' : 'allow'} this room?
          </DialogTitle>
          <DialogActions>
            <Button onClick={handleDialogCancel}>Cancel</Button>
            <Button
              onClick={handleDialogConfirm}
              variant="contained"
              color={confirmAction === 'restrict' ? "error" : "success"}
            >
              Confirm
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Container>
  );
};

export default CalendarPage;
