updater


- name: Deploy status app service
  hosts: all
  become: true
  become_user: root
  become_method: sudo
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Update docker-compose.yml
      copy:
        src: ../docker-compose.yml  
        dest: "{{ appdir | default('/opt/app') }}/docker-compose.yml"

    - name: Create credentials directory if it doesn't exist
      file:
        path: "{{ CREDENTIAL_DIR }}"
        state: directory
        mode: '0755'

    - name: Copy token content to file (if provided)
      copy:
        src: "{{ TOKENS }}"
        dest: "{{ CREDENTIAL_DIR }}/envfile.env"
      when: TOKENS is defined

    - name: Render environment variables to env file
      template:
        src: "templates/envfile.env.j2"
        dest: "{{ CREDENTIAL_DIR }}/envfile.env"

    - name: Update containers using docker compose
      no_log: true
      ignore_errors: true
      shell: |
        message() {
          echo "$(date +'%Y-%m-%d %H:%M:%S') $HOSTNAME: $1"
        }

        message "Logging into container registry"
        docker login --username $REGISTRY_USER -p $REGISTRY_TOKEN gitlab.mitsogo.com:4567
        if [ $? -ne 0 ]; then
          message "Error while logging into container registry"
          exit 1
        fi

        message "Pulling docker images"
        FRONTEND_VERSION=$FRONTEND_VERSION BACKEND_VERSION=$BACKEND_VERSION docker compose pull
        if [ $? -ne 0 ]; then
          message "Error while pulling images from container registry"
          exit 2
        fi

        message "Updating containers with latest image"
        FRONTEND_VERSION=$FRONTEND_VERSION BACKEND_VERSION=$BACKEND_VERSION docker compose up -d
        if [ $? -ne 0 ]; then
          message "Failed to update containers"
          exit 3
        fi

        message "Logging out from container registry"
        docker logout gitlab.mitsogo.com
      args:
        chdir: "{{ appdir | default('/opt/app') }}"
      environment:
        REGISTRY_TOKEN: "{{ lookup('env', 'REGISTRY_TOKEN') }}"
        REGISTRY_USER: "{{ lookup('env', 'REGISTRY_USER') }}"
        FRONTEND_VERSION: "{{ FRONTEND_VERSION | default('latest') }}"
        BACKEND_VERSION: "{{ BACKEND_VERSION | default('latest') }}"
        CREDENTIAL_DIR: "{{ CREDENTIAL_DIR }}"
        TOKEN_FILE: "{{ CREDENTIAL_DIR }}/envfile.env"
      register: output

    - name: Show standard output
      debug:
        var: output.stdout_lines

    - name: Show error output
      debug:
        var: output.stderr_lines

    - name: Fail if container update failed
      fail:
        msg: "Status app update failed"
      when: output.rc != 0




env


[zabbix]
ZABBIX_URL = {{ ZABBIX_URL }}
ZABBIX_USER = {{ ZABBIX_USER }}
ZABBIX_PASSWORD = {{ ZABBIX_PASSWORD }}

[azure]
AZURE_CLIENT_ID = {{ AZURE_CLIENT_ID }}
AZURE_TENANT_ID = {{ AZURE_TENANT_ID }}
AZURE_REDIRECT_URL = {{ AZURE_REDIRECT_URL }}
AZURE_SECRET = {{ AZURE_SECRET }}

[middleware]
OPEN_PATHS={{ OPEN_PATHS | join(',') if OPEN_PATHS is iterable and OPEN_PATHS is not string else OPEN_PATHS }}
HYBRID_PATHS={{ HYBRID_PATHS | join(',') if HYBRID_PATHS is iterable and HYBRID_PATHS is not string else HYBRID_PATHS }}

[sentry]
dsn={{ SENTRY_DSN }}
release={{ SENTRY_RELEASE }}





--label "org.label-schema.version=${TAG}"

.ansible-deployment:
  stage: deployment
  image: python:3.10
  before_script:
    - pip install ansible





script:
  - >
    ansible-playbook "$PLAYBOOK_PATH" -i "$INVENTORY"
    --extra-vars "$ANSIBLE_EXTRA_VARS"

